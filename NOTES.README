
!! steps

+ 1: get input
    + must handle when the input is empty
    + get_next is integrated successfully but needs to not e recompiled

+ 2: tokenizing the input
    + must handle tokens that have metacharcters inside them
    + search the tokens for special caracters and remove them
    + problem with ; at the end of input fixed
    + there still problems with single quotes tokens !fixed
    !!! error while tokenizing need to be fixed
        + error echo heheh\\\ !! lexer
        + error echo "jfhdfh\'"
        + error echo 'a'b'c';
        + error echo 'Don'\''t do that'
        + error echo "The quote for today is "\"TGIF\"
        + error echo "The quote for today is "\""TGIF"\"
        + error echo somthing"more"something

+ 3: parsing the tokens and build a 3D linked list of command
    + must handle redirection if the filename doesnt follow < or > or >>
    + implementation of freeing the parse tree after finish
    + multiple redirections of the same type must creat the first ones  if they don't
        exist and only redirect from or to the last one.

+ 6: implement built-in
    + modification of builtins prototypes to accepts array of arguments not a linked list of arguments
    + 6-1: echo with option -n
        + segfault if no argument is given
    + 6-2: cd with only a relative and absolute path
        + $PWD  must change
        + $OLDPWD must change
    + 6-3: pwd
    + 6-4: export
        + delete the quotes of the value of a VAR="VALUE"
        + !! needs to redirecte the error to standard error
        + testing
        + handle identifier
        + case VAR or VAR=

    + 6-5: unset without any option
    + 6-7: env
    + 6-8: exit
        + !!!!!must free everything before exiting
        + must be tested with diffrent exit status
    + must compile builtins programs to use inside the pipelines after forking
        (there is already binary builtin in the system)

+ 5: shell expansions
    + $! and $VAR of the command before performing redirection
    - 5-1: environment variables needs to be tested
        + SHELL env must change to minishell
        - incrementation of SHLVL env var
            - error echo $SHLVL
    + segfault !! don't know why (recoding the entire logic of expansions)
    + multiple $VAR inside the same token

+ 7: Execute the commands list
    + build the args array from cmd->arguments !! needs testing
    + non builtin simple command working ok
    + built ins need testing ;
    + execution should start only if the expansion of a pipeline is working fine
    + execve function needs envp array to function properly
    + redirections and pipelining, before execution if there is an error while creating files or pipes
        the execution will not take place
    + segfault while running "make"
    + only "cd" builtin will run in a seperate process if it is inside a pipeline


+ 8: piplining:
    + the priority is for redirection before the pipe ???
    + THEY SHOULD WORK BEFORE ANY REDIRECTIONS SPECIFIED BY THE command
    + duplicating the stdout if it's the last cmd and no outputfile is given

+ 9: redirections
    + !! pipelining is performed before any redirections specified by the command
    + should handle the case if open returns -1
    + the first of (> or >>) define the output:
        if > is before >> in cmd the > file receive the output and >> files get created only
        or the opposite
    + which permession should the created files have ????
    + redirecting >
        + problem with " ** > ** | ** " fixed
        + error ls -la | grep "keddib" | > a
    + redirection <
    + redirecting >>

+ 10: collect the exit status
    + $? of an executed cmd is the value returned by WAITPID
    + fatal signal (QUIT || INT) whose number is N, $? = 128 + N
    + cmd not found, the child process created for execution returns 127
    + if cmd is found, but not executed the return status is 126
    + if a command fails because of an error during (expansion or redirection) $? > 0


- 11: handling signals
    ?? https://stackoverflow.com/questions/42563400/hide-c-pressing-ctrl-c-in-c
    - CTRL-D
    + INT signal
        + must rethink the showprompt to show PWD after receiving the SIG_QUIT
    + QUIT signal

- 12: check for leaks

- 13: optimize the code

- 14: testing

!!! Notes
* before production phase, linked list must be handled so there will be no double code
+ must redirect the error to stderror 2
+ """WARNING: terminal is not fully functional""" error needs to be fixed
* t_data *data should be a global varibial to modify the exit status if a signal is received
